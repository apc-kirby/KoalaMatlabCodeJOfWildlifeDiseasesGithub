function paramsMatrix = generateParamsMatrix(fields,mins,maxes,numberOfParameterSetsPerScenario,integerFieldsWithRanges)

% paramsMatrix = generateParamsMatrix(fields,mins,maxes,numberOfParameterSetsPerScenario,integerFieldsWithRanges)
% Produce set of Latin hypercube samples from params.
%
% fields: Parameter names.
% mins: Parameter minima.
% maxes: Parameter maxima.
% numberOfParameterSetsPerScenario: Number of parameter sets that will be put through the calibration process. 
% integerFieldsWithRanges: Names of parameters that can only take integer
% values.
%
% paramsMatrix: Latin hypercube samples from the parameter space.

[~,integerParamsIndexes] = ismember(integerFieldsWithRanges,fields);
filterParamsWithRanges = mins ~= maxes;
[~,integerParamsIndexesOnlyConsideringParamsWithRanges] = ismember(integerFieldsWithRanges,fields(filterParamsWithRanges));
% We must round values of integer-only parameters generated by the Latin
% hypersquare, but if we do this using the mins and maxes given in the
% parameter table the min and max value will be sampled less frequently
% than the intermediate values. Therefore, we use floor instead of round,
% and increase the max value of integer-only parameters by one (so that the
% max value is also equally sampled).
maxesWithIntsPadded = maxes;
maxesWithIntsPadded(integerParamsIndexes) = maxesWithIntsPadded(integerParamsIndexes) + 1;
numberOfParamsWithRanges = sum(filterParamsWithRanges);
lhsDesignMatrix = lhsdesign(numberOfParameterSetsPerScenario,numberOfParamsWithRanges);
lhsParamSets = lhsDesignMatrix * diag(maxesWithIntsPadded(filterParamsWithRanges)-mins(filterParamsWithRanges)) + repmat(mins(filterParamsWithRanges),[numberOfParameterSetsPerScenario 1]);
% Create array of params structs.
% fixedParamMatrix = repmat(mins(~filterParamsWithRanges),[numberOfParameterSetsPerScenario 1]);
paramsMatrix = lhsParamSets;
paramsMatrix(:, integerParamsIndexesOnlyConsideringParamsWithRanges) = floor(paramsMatrix(:, integerParamsIndexesOnlyConsideringParamsWithRanges));
end
